{"name":"Pick","slug":"Pick","metadata":{"title":"Pick Function","description":"Creates new objects by selecting only specified properties from source objects","category":"Data Manipulation","concepts":["object manipulation","property selection","immutability","type safety"],"timeComplexity":"O(k) where k is number of keys to pick","spaceComplexity":"O(k) where k is result object properties","difficulty":"Easy"},"examples":[{"input":"{ a: 1, b: 2, c: 3 }, ['a', 'c']","output":"{ a: 1, c: 3 }","description":"Basic property selection","code":"const user = { id: 1, name: 'John', email: 'john@example.com', password: 'secret' };\nconst publicUser = pick(user, ['id', 'name', 'email']);\n// { id: 1, name: 'John', email: 'john@example.com' }"}],"code":"import type { UtilityMetadata, UtilityExample } from '@/interfaces/utilities';\nimport type { SolutionMetadata } from '@/interfaces/shared';\n\nexport function pick<T extends Record<string, unknown>, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Pick<T, K> {\n  if (obj == null || typeof obj !== 'object') {\n    throw new Error('First argument must be an object');\n  }\n  \n  const result = {} as Pick<T, K>;\n  \n  for (const key of keys) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (result as any)[key] = obj[key];\n    }\n  }\n  \n  return result;\n}\n\nexport function pickBy<T extends Record<string, unknown>>(\n  obj: T,\n  predicate: (value: T[keyof T], key: keyof T) => boolean\n): Partial<T> {\n  const result = {} as Partial<T>;\n  \n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const value = obj[key];\n      if (predicate(value, key)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (result as any)[key] = value;\n      }\n    }\n  }\n  \n  return result;\n}\n\nexport const metadata: UtilityMetadata = {\n  title: \"Pick Function\",\n  description: \"Creates new objects by selecting only specified properties from source objects\",\n  category: \"Data Manipulation\",\n  concepts: [\"object manipulation\", \"property selection\", \"immutability\", \"type safety\"],\n  timeComplexity: \"O(k) where k is number of keys to pick\",\n  spaceComplexity: \"O(k) where k is result object properties\",\n  difficulty: \"Easy\"\n};\n\nexport const solutions: SolutionMetadata[] = [\n  {\n    name: \"pick\",\n    tabName: \"Basic\",\n    approach: \"Select specific properties by key names\",\n    timeComplexity: \"O(k)\",\n    spaceComplexity: \"O(k)\",\n    isOptimal: true,\n    type: \"function\"\n  },\n  {\n    name: \"pickBy\",\n    tabName: \"Predicate\",\n    approach: \"Select properties using predicate function\",\n    timeComplexity: \"O(n)\",\n    spaceComplexity: \"O(k)\",\n    isOptimal: true,\n    type: \"function\"\n  }\n];\n\nexport const examples: UtilityExample[] = [\n  {\n    input: \"{ a: 1, b: 2, c: 3 }, ['a', 'c']\",\n    output: \"{ a: 1, c: 3 }\",\n    description: \"Basic property selection\",\n    code: `const user = { id: 1, name: 'John', email: 'john@example.com', password: 'secret' };\nconst publicUser = pick(user, ['id', 'name', 'email']);\n// { id: 1, name: 'John', email: 'john@example.com' }`\n  }\n];\n\nconst utilityModule = { pick, pickBy, metadata, solutions, examples };\nexport default utilityModule;","functions":["pick","pickBy"],"solutions":[{"name":"pick","tabName":"Basic","code":"export function pick<T extends Record<string, unknown>, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Pick<T, K> {\n  if (obj == null || typeof obj !== 'object') {\n    throw new Error('First argument must be an object');\n  }\n  \n  const result = {} as Pick<T, K>;\n  \n  for (const key of keys) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (result as any)[key] = obj[key];\n    }\n  }\n  \n  return result;\n}","approach":"Basic","timeComplexity":"O(k)","spaceComplexity":"O(k)","isOptimal":true,"type":"function"},{"name":"pickBy","tabName":"Predicate","code":"export function pickBy<T extends Record<string, unknown>>(\n  obj: T,\n  predicate: (value: T[keyof T], key: keyof T) => boolean\n): Partial<T> {\n  const result = {} as Partial<T>;\n  \n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const value = obj[key];\n      if (predicate(value, key)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (result as any)[key] = value;\n      }\n    }\n  }\n  \n  return result;\n}","approach":"Predicate","timeComplexity":"O(n)","spaceComplexity":"O(k)","isOptimal":true,"type":"function"}]}