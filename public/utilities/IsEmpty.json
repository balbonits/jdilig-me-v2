{"name":"IsEmpty","slug":"IsEmpty","metadata":{"title":"IsEmpty Function","description":"Comprehensive emptiness checking for all JavaScript data types including objects, arrays, strings, and collections","category":"Validation","concepts":["type guards","type checking","data validation","truthiness"],"timeComplexity":"O(1) for most types, O(n) for objects","spaceComplexity":"O(1) constant space","difficulty":"Easy","examples":["isEmpty([]) → true, isEmpty({ key: 'value' }) → false"],"performanceNotes":"- Time: O(1) for primitives/arrays, O(n) for objects\n - Space: O(1) constant space"},"examples":[{"input":"various types","output":"boolean","description":"Basic emptiness validation","code":"// Primitive types\nisEmpty(null);           // true\nisEmpty(undefined);      // true\nisEmpty('');            // true\nisEmpty('   ');         // true (whitespace)\nisEmpty(0);             // true\nisEmpty(NaN);           // true\nisEmpty(false);         // false\n\n// Collections\nisEmpty([]);            // true\nisEmpty({});            // true\nisEmpty(new Map());     // true\nisEmpty(new Set());     // true\n\n// Non-empty values\nisEmpty('hello');       // false\nisEmpty([1, 2, 3]);     // false\nisEmpty({ key: 'value' }); // false"},{"input":"form validation","output":"validation result","description":"Form field validation","code":"interface FormData {\n  username: string;\n  email: string;\n  preferences: string[];\n}\n\nfunction validateForm(data: FormData): string[] {\n  const errors: string[] = [];\n  \n  if (isEmpty(data.username)) {\n    errors.push('Username is required');\n  }\n  \n  if (isEmpty(data.email)) {\n    errors.push('Email is required');\n  }\n  \n  if (isEmptyArray(data.preferences)) {\n    errors.push('At least one preference must be selected');\n  }\n  \n  return errors;\n}\n\nconst formData = { username: '', email: 'user@example.com', preferences: [] };\nconst errors = validateForm(formData); // ['Username is required', 'At least one preference must be selected']"},{"input":"nested structures","output":"deep emptiness check","description":"Deep emptiness validation for nested data","code":"const data = {\n  user: {\n    profile: {\n      name: '',\n      settings: {}\n    },\n    posts: []\n  },\n  metadata: {\n    tags: [],\n    categories: {}\n  }\n};\n\nisEmpty(data);         // false (has keys)\nisEmptyDeep(data);     // true (all nested values are empty)\n\n// Practical use case\nfunction hasContent(obj: unknown): boolean {\n  return !isEmptyDeep(obj);\n}\n\nhasContent({ a: { b: { c: '' } } });  // false\nhasContent({ a: { b: { c: 'value' } } }); // true"},{"input":"API response validation","output":"response status","description":"API response content validation","code":"interface ApiResponse {\n  data: unknown[];\n  metadata: Record<string, unknown>;\n  errors: string[];\n}\n\nfunction processApiResponse(response: ApiResponse) {\n  if (isEmptyArray(response.data)) {\n    return { status: 'no-data', message: 'No data available' };\n  }\n  \n  if (!isEmptyArray(response.errors)) {\n    return { status: 'error', errors: response.errors };\n  }\n  \n  if (isEmptyObject(response.metadata)) {\n    console.warn('Response missing metadata');\n  }\n  \n  return { status: 'success', data: response.data };\n}\n\nconst response = { data: [], metadata: {}, errors: [] };\nprocessApiResponse(response); // { status: 'no-data', message: 'No data available' }"}],"code":"import type { UtilityMetadata, UtilityExample } from '@/interfaces/utilities';\nimport type { SolutionMetadata } from '@/interfaces/shared';\n\n/**\n * IsEmpty Utility Implementation\n * \n * DESCRIPTION:\n * Checks if values are empty across different data types including objects, arrays,\n * strings, Maps, Sets, and primitive values. Essential for form validation and data processing.\n * \n * ENHANCED METADATA:\n * - Difficulty: Easy (type checking and iteration patterns)\n * - Solution Type: function (type guard and validation utility)\n * - Time Complexity: O(1) for most types, O(n) for objects\n * - Space Complexity: O(1) constant space usage\n * - Concepts: Type guards, Type checking, Data validation, Truthiness\n * - Category: Data validation utility\n * \n * EXAMPLE:\n * isEmpty([]) → true, isEmpty({ key: 'value' }) → false\n * \n * CONCEPTS:\n * - Type checking and guards\n * - Truthiness and falsiness\n * - Object and array inspection\n * - Data validation patterns\n * \n * PERFORMANCE:\n * - Time: O(1) for primitives/arrays, O(n) for objects\n * - Space: O(1) constant space\n * \n * Multiple implementations included to show different approaches.\n */\n\n// Basic isEmpty implementation\nexport function isEmpty(value: unknown): boolean {\n  // Null and undefined\n  if (value == null) return true;\n  \n  // Primitive types (boolean, number, symbol)\n  if (typeof value === 'boolean') return false;\n  if (typeof value === 'number') return value === 0 || Number.isNaN(value);\n  if (typeof value === 'symbol') return false;\n  if (typeof value === 'bigint') return value === BigInt(0);\n  \n  // String\n  if (typeof value === 'string') return value.length === 0 || value.trim().length === 0;\n  \n  // Array\n  if (Array.isArray(value)) return value.length === 0;\n  \n  // Map and Set\n  if (value instanceof Map || value instanceof Set) return value.size === 0;\n  \n  // Date\n  if (value instanceof Date) return false;\n  \n  // Object (including plain objects)\n  if (typeof value === 'object') {\n    // Check for own enumerable properties\n    return Object.keys(value).length === 0;\n  }\n  \n  // Function\n  if (typeof value === 'function') return false;\n  \n  return true;\n}\n\n// Strict isEmpty that considers whitespace-only strings as non-empty\nexport function isEmptyStrict(value: unknown): boolean {\n  // Null and undefined\n  if (value == null) return true;\n  \n  // Primitive types\n  if (typeof value === 'boolean') return false;\n  if (typeof value === 'number') return value === 0 || Number.isNaN(value);\n  if (typeof value === 'symbol') return false;\n  if (typeof value === 'bigint') return value === BigInt(0);\n  \n  // String (strict - only empty string is empty)\n  if (typeof value === 'string') return value.length === 0;\n  \n  // Array\n  if (Array.isArray(value)) return value.length === 0;\n  \n  // Map and Set\n  if (value instanceof Map || value instanceof Set) return value.size === 0;\n  \n  // Date\n  if (value instanceof Date) return false;\n  \n  // Object\n  if (typeof value === 'object') {\n    return Object.keys(value).length === 0;\n  }\n  \n  // Function\n  if (typeof value === 'function') return false;\n  \n  return true;\n}\n\n// Deep isEmpty that checks nested structures\nexport function isEmptyDeep(value: unknown): boolean {\n  // Basic empty check first\n  if (isEmpty(value)) return true;\n  \n  // Deep check for arrays\n  if (Array.isArray(value)) {\n    return value.every(item => isEmptyDeep(item));\n  }\n  \n  // Deep check for objects\n  if (value && typeof value === 'object' && value.constructor === Object) {\n    return Object.values(value).every(val => isEmptyDeep(val));\n  }\n  \n  return false;\n}\n\n// Type-specific isEmpty functions\nexport function isEmptyString(value: string): boolean {\n  return typeof value === 'string' && (value.length === 0 || value.trim().length === 0);\n}\n\nexport function isEmptyArray<T>(value: T[]): boolean {\n  return Array.isArray(value) && value.length === 0;\n}\n\nexport function isEmptyObject(value: Record<string, unknown>): boolean {\n  return value != null && \n         typeof value === 'object' && \n         !Array.isArray(value) &&\n         Object.keys(value).length === 0;\n}\n\n// Collection isEmpty with size property\nexport function isEmptyCollection(value: { size: number } | { length: number }): boolean {\n  if (value == null) return true;\n  \n  if ('size' in value) return value.size === 0;\n  if ('length' in value) return value.length === 0;\n  \n  return false;\n}\n\n// Utility metadata\nexport const metadata: UtilityMetadata = {\n  title: \"IsEmpty Function\",\n  description: \"Comprehensive emptiness checking for all JavaScript data types including objects, arrays, strings, and collections\",\n  category: \"Validation\",\n  concepts: [\"type guards\", \"type checking\", \"data validation\", \"truthiness\"],\n  timeComplexity: \"O(1) for most types, O(n) for objects\",\n  spaceComplexity: \"O(1) constant space\",\n  difficulty: \"Easy\"\n};\n\nexport const solutions: SolutionMetadata[] = [\n  {\n    name: \"isEmpty\",\n    tabName: \"Basic\",\n    approach: \"Comprehensive emptiness check for all data types\",\n    timeComplexity: \"O(1)\",\n    spaceComplexity: \"O(1)\",\n    isOptimal: true,\n    type: \"function\"\n  },\n  {\n    name: \"isEmptyStrict\",\n    tabName: \"Strict\",\n    approach: \"Strict mode that treats whitespace strings as non-empty\",\n    timeComplexity: \"O(1)\",\n    spaceComplexity: \"O(1)\",\n    isOptimal: true,\n    type: \"function\"\n  },\n  {\n    name: \"isEmptyDeep\",\n    tabName: \"Deep\",\n    approach: \"Recursive emptiness check for nested structures\",\n    timeComplexity: \"O(n)\",\n    spaceComplexity: \"O(d)\",\n    isOptimal: false,\n    type: \"function\"\n  },\n  {\n    name: \"isEmptyString\",\n    tabName: \"String\",\n    approach: \"Optimized emptiness check specifically for strings\",\n    timeComplexity: \"O(1)\",\n    spaceComplexity: \"O(1)\",\n    isOptimal: true,\n    type: \"function\"\n  }\n];\n\n// Example use cases\nexport const examples: UtilityExample[] = [\n  {\n    input: \"various types\",\n    output: \"boolean\",\n    description: \"Basic emptiness validation\",\n    code: `// Primitive types\nisEmpty(null);           // true\nisEmpty(undefined);      // true\nisEmpty('');            // true\nisEmpty('   ');         // true (whitespace)\nisEmpty(0);             // true\nisEmpty(NaN);           // true\nisEmpty(false);         // false\n\n// Collections\nisEmpty([]);            // true\nisEmpty({});            // true\nisEmpty(new Map());     // true\nisEmpty(new Set());     // true\n\n// Non-empty values\nisEmpty('hello');       // false\nisEmpty([1, 2, 3]);     // false\nisEmpty({ key: 'value' }); // false`\n  },\n  {\n    input: \"form validation\",\n    output: \"validation result\",\n    description: \"Form field validation\",\n    code: `interface FormData {\n  username: string;\n  email: string;\n  preferences: string[];\n}\n\nfunction validateForm(data: FormData): string[] {\n  const errors: string[] = [];\n  \n  if (isEmpty(data.username)) {\n    errors.push('Username is required');\n  }\n  \n  if (isEmpty(data.email)) {\n    errors.push('Email is required');\n  }\n  \n  if (isEmptyArray(data.preferences)) {\n    errors.push('At least one preference must be selected');\n  }\n  \n  return errors;\n}\n\nconst formData = { username: '', email: 'user@example.com', preferences: [] };\nconst errors = validateForm(formData); // ['Username is required', 'At least one preference must be selected']`\n  },\n  {\n    input: \"nested structures\",\n    output: \"deep emptiness check\",\n    description: \"Deep emptiness validation for nested data\",\n    code: `const data = {\n  user: {\n    profile: {\n      name: '',\n      settings: {}\n    },\n    posts: []\n  },\n  metadata: {\n    tags: [],\n    categories: {}\n  }\n};\n\nisEmpty(data);         // false (has keys)\nisEmptyDeep(data);     // true (all nested values are empty)\n\n// Practical use case\nfunction hasContent(obj: unknown): boolean {\n  return !isEmptyDeep(obj);\n}\n\nhasContent({ a: { b: { c: '' } } });  // false\nhasContent({ a: { b: { c: 'value' } } }); // true`\n  },\n  {\n    input: \"API response validation\",\n    output: \"response status\",\n    description: \"API response content validation\",\n    code: `interface ApiResponse {\n  data: unknown[];\n  metadata: Record<string, unknown>;\n  errors: string[];\n}\n\nfunction processApiResponse(response: ApiResponse) {\n  if (isEmptyArray(response.data)) {\n    return { status: 'no-data', message: 'No data available' };\n  }\n  \n  if (!isEmptyArray(response.errors)) {\n    return { status: 'error', errors: response.errors };\n  }\n  \n  if (isEmptyObject(response.metadata)) {\n    console.warn('Response missing metadata');\n  }\n  \n  return { status: 'success', data: response.data };\n}\n\nconst response = { data: [], metadata: {}, errors: [] };\nprocessApiResponse(response); // { status: 'no-data', message: 'No data available' }`\n  }\n];\n\n// Default export for easy importing\nconst utilityModule = {\n  isEmpty,\n  isEmptyStrict,\n  isEmptyDeep,\n  isEmptyString,\n  isEmptyArray,\n  isEmptyObject,\n  isEmptyCollection,\n  metadata,\n  solutions,\n  examples\n};\n\nexport default utilityModule;","functions":["isEmpty","isEmptyStrict","isEmptyDeep","isEmptyString","isEmptyArray","isEmptyObject","isEmptyCollection"],"solutions":[{"name":"isEmpty","tabName":"Basic","code":"export function isEmpty(value: unknown): boolean {\n  // Null and undefined\n  if (value == null) return true;\n  \n  // Primitive types (boolean, number, symbol)\n  if (typeof value === 'boolean') return false;\n  if (typeof value === 'number') return value === 0 || Number.isNaN(value);\n  if (typeof value === 'symbol') return false;\n  if (typeof value === 'bigint') return value === BigInt(0);\n  \n  // String\n  if (typeof value === 'string') return value.length === 0 || value.trim().length === 0;\n  \n  // Array\n  if (Array.isArray(value)) return value.length === 0;\n  \n  // Map and Set\n  if (value instanceof Map || value instanceof Set) return value.size === 0;\n  \n  // Date\n  if (value instanceof Date) return false;\n  \n  // Object (including plain objects)\n  if (typeof value === 'object') {\n    // Check for own enumerable properties\n    return Object.keys(value).length === 0;\n  }\n  \n  // Function\n  if (typeof value === 'function') return false;\n  \n  return true;\n}\n\n// Strict isEmpty that considers whitespace-only strings as non-empty","approach":"Basic","timeComplexity":"O(1)","spaceComplexity":"O(1)","isOptimal":true,"type":"function"},{"name":"isEmptyStrict","tabName":"Strict","code":"export function isEmptyStrict(value: unknown): boolean {\n  // Null and undefined\n  if (value == null) return true;\n  \n  // Primitive types\n  if (typeof value === 'boolean') return false;\n  if (typeof value === 'number') return value === 0 || Number.isNaN(value);\n  if (typeof value === 'symbol') return false;\n  if (typeof value === 'bigint') return value === BigInt(0);\n  \n  // String (strict - only empty string is empty)\n  if (typeof value === 'string') return value.length === 0;\n  \n  // Array\n  if (Array.isArray(value)) return value.length === 0;\n  \n  // Map and Set\n  if (value instanceof Map || value instanceof Set) return value.size === 0;\n  \n  // Date\n  if (value instanceof Date) return false;\n  \n  // Object\n  if (typeof value === 'object') {\n    return Object.keys(value).length === 0;\n  }\n  \n  // Function\n  if (typeof value === 'function') return false;\n  \n  return true;\n}\n\n// Deep isEmpty that checks nested structures","approach":"Strict","timeComplexity":"O(1)","spaceComplexity":"O(1)","isOptimal":true,"type":"function"},{"name":"isEmptyDeep","tabName":"Deep","code":"export function isEmptyDeep(value: unknown): boolean {\n  // Basic empty check first\n  if (isEmpty(value)) return true;\n  \n  // Deep check for arrays\n  if (Array.isArray(value)) {\n    return value.every(item => isEmptyDeep(item));\n  }\n  \n  // Deep check for objects\n  if (value && typeof value === 'object' && value.constructor === Object) {\n    return Object.values(value).every(val => isEmptyDeep(val));\n  }\n  \n  return false;\n}\n\n// Type-specific isEmpty functions","approach":"Deep","timeComplexity":"O(n)","spaceComplexity":"O(d)","isOptimal":false,"type":"function"},{"name":"isEmptyString","tabName":"String","code":"export function isEmptyString(value: string): boolean {\n  return typeof value === 'string' && (value.length === 0 || value.trim().length === 0);\n}","approach":"String","timeComplexity":"O(1)","spaceComplexity":"O(1)","isOptimal":true,"type":"function"}]}