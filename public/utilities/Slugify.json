{"name":"Slugify","slug":"Slugify","metadata":{"title":"Slugify Function","description":"Converts strings to URL-friendly slugs by removing special characters and replacing spaces","category":"String Manipulation","concepts":["string manipulation","regular expressions","URL formatting","text processing"],"timeComplexity":"O(n) where n is string length","spaceComplexity":"O(n) for result string","difficulty":"Easy"},"examples":[{"input":"'Hello World!'","output":"'hello-world'","description":"Basic slug generation","code":"slugify('Hello World!'); // 'hello-world'\nslugify('My Blog Post Title'); // 'my-blog-post-title'"}],"code":"import type { UtilityMetadata, UtilityExample } from '@/interfaces/utilities';\nimport type { SolutionMetadata } from '@/interfaces/shared';\n\nexport function slugify(text: string, separator: string = '-'): string {\n  if (typeof text !== 'string') return '';\n  \n  return text\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/[\\s_-]+/g, separator) // Replace spaces and underscores with separator\n    .replace(new RegExp(`^${separator}+|${separator}+$`, 'g'), ''); // Remove leading/trailing separators\n}\n\nexport function slugifyAdvanced(text: string, options: {\n  separator?: string;\n  lowercase?: boolean;\n  strict?: boolean;\n  maxLength?: number;\n} = {}): string {\n  const { separator = '-', lowercase = true, strict = false, maxLength } = options;\n  \n  if (typeof text !== 'string') return '';\n  \n  let result = text.trim();\n  \n  if (lowercase) {\n    result = result.toLowerCase();\n  }\n  \n  if (strict) {\n    result = result.replace(/[^a-zA-Z0-9\\s-_]/g, '');\n  } else {\n    result = result.replace(/[^\\w\\s-]/g, '');\n  }\n  \n  result = result.replace(/[\\s_-]+/g, separator);\n  result = result.replace(new RegExp(`^${separator}+|${separator}+$`, 'g'), '');\n  \n  if (maxLength && result.length > maxLength) {\n    result = result.substring(0, maxLength);\n    result = result.replace(new RegExp(`${separator}+$`), '');\n  }\n  \n  return result;\n}\n\nexport const metadata: UtilityMetadata = {\n  title: \"Slugify Function\",\n  description: \"Converts strings to URL-friendly slugs by removing special characters and replacing spaces\",\n  category: \"String Manipulation\",\n  concepts: [\"string manipulation\", \"regular expressions\", \"URL formatting\", \"text processing\"],\n  timeComplexity: \"O(n) where n is string length\",\n  spaceComplexity: \"O(n) for result string\",\n  difficulty: \"Easy\"\n};\n\nexport const solutions: SolutionMetadata[] = [\n  {\n    name: \"slugify\",\n    tabName: \"Basic\",\n    approach: \"Simple slug generation with character replacement\",\n    timeComplexity: \"O(n)\",\n    spaceComplexity: \"O(n)\",\n    isOptimal: true,\n    type: \"function\"\n  },\n  {\n    name: \"slugifyAdvanced\",\n    tabName: \"Advanced\",\n    approach: \"Configurable slug generation with options\",\n    timeComplexity: \"O(n)\",\n    spaceComplexity: \"O(n)\",\n    isOptimal: true,\n    type: \"function\"\n  }\n];\n\nexport const examples: UtilityExample[] = [\n  {\n    input: \"'Hello World!'\",\n    output: \"'hello-world'\",\n    description: \"Basic slug generation\",\n    code: `slugify('Hello World!'); // 'hello-world'\nslugify('My Blog Post Title'); // 'my-blog-post-title'`\n  }\n];\n\nconst utilityModule = { slugify, slugifyAdvanced, metadata, solutions, examples };\nexport default utilityModule;","functions":["slugify","slugifyAdvanced"],"solutions":[{"name":"slugify","tabName":"Basic","code":"export function slugify(text: string, separator: string = '-'): string {\n  if (typeof text !== 'string') return '';\n  \n  return text\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/[\\s_-]+/g, separator) // Replace spaces and underscores with separator\n    .replace(new RegExp(`^${separator}+|${separator}+$`, 'g'), ''); // Remove leading/trailing separators\n}","approach":"Basic","timeComplexity":"O(n)","spaceComplexity":"O(n)","isOptimal":true,"type":"function"},{"name":"slugifyAdvanced","tabName":"Advanced","code":"export function slugifyAdvanced(text: string, options: {\n  separator?: string;\n  lowercase?: boolean;\n  strict?: boolean;\n  maxLength?: number;\n} = {}): string {\n  const { separator = '-', lowercase = true, strict = false, maxLength } = options;\n  \n  if (typeof text !== 'string') return '';\n  \n  let result = text.trim();\n  \n  if (lowercase) {\n    result = result.toLowerCase();\n  }\n  \n  if (strict) {\n    result = result.replace(/[^a-zA-Z0-9\\s-_]/g, '');\n  } else {\n    result = result.replace(/[^\\w\\s-]/g, '');\n  }\n  \n  result = result.replace(/[\\s_-]+/g, separator);\n  result = result.replace(new RegExp(`^${separator}+|${separator}+$`, 'g'), '');\n  \n  if (maxLength && result.length > maxLength) {\n    result = result.substring(0, maxLength);\n    result = result.replace(new RegExp(`${separator}+$`), '');\n  }\n  \n  return result;\n}","approach":"Advanced","timeComplexity":"O(n)","spaceComplexity":"O(n)","isOptimal":true,"type":"function"}]}